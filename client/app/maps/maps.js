var map = angular.module('app.map', []);

map.controller('MapController', function($scope, Geocoder) {
  $scope.queryLoc;
  $scope.markers = [];

  //Add marker to map based on lat and lng
  var addMarker = function(lat, lng) {
    var marker = new google.maps.Marker({
      position: {lat: lat, lng: lng},
      map: $scope.map,
      title: 'Hello World!'
    });

    $scope.markers.push(marker);
  };

  //map click to add marker
  $scope.clickMap = function(lat, lng) {
    addMarker(lat, lng);
    console.log('lat & lng from click', lat, lng);
  };

  $scope.generateMap = function(queryLoc) {
    console.log(queryLoc);
    Geocoder.getLatLng(queryLoc, $scope.drawMap);
    Geocoder.getBounds(queryLoc, $scope.setMapBounds);
  };

  $scope.$on('search', function(e) {
    $scope.generateMap($scope.$parent.searchQuery);
  });

  $scope.$on('picClick', function(e) {
    console.log('lat', $scope.$parent.lat);
    console.log('lat', $scope.$parent.lng);
    console.log(typeof $scope.$parent.lat);
    addMarker($scope.$parent.lat, $scope.$parent.lng);
  });

});

//angular directive tied to the my-map element in index.html.  This replaces my-map with the DOM elments generated by the template and modifoed by the link function
map.directive('myMap', function(Geocoder) {

  var link = function(scope, element, attrs) {

    //Saves map dom element into
    scope.mapElement = element[0];


    //Attempts to set bounds of scope.map, useful for scaling map based on size of desired area
    scope.setMapBounds = function(bounds) {
      if (bounds !== undefined) {
        console.log('bounds', bounds);
        console.log('map', scope.map);
        scope.map.fitBounds(bounds);
      }
    };


    //Saves function to scope to draw a new map based on lat & lng, this function is available in the shared scope as $scope
    scope.drawMap = function(lat, lng, zoom = 13) {

      var mapOptions = {
        center: new google.maps.LatLng(lat, lng),
        zoom: zoom,
        scrollwheel: false,
        show: true
      };

      // Use mapOptions object to create a new map and save to scope.map
      scope.map = new google.maps.Map(scope.mapElement, mapOptions);

      // Add click event listener, which call the $scope.click method
      google.maps.event.addListener(scope.map, 'click', function (event) {
        var lat = event.latLng.lat();
        var lng = event.latLng.lng();
        scope.clickMap(lat, lng);
      }); //end addListener

    };

  };

  return {
    template: ' <div id="map_canvas" ng-controller="MapController"><div id="gmap"></div></div>',
    replace: true,
    //function passed into link will modify the elements that the directive adds to the dom
    link: link,
    //setting scope to false will allow scope to be shared with the controller
    scope: false
  };
});
