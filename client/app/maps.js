var map = angular.module('app.map', []);

map.controller('MapController', function($scope, Geocoder) {

  $scope.markers = [];

  var addMarker = function(lat, lng) {
    var marker = new google.maps.Marker({
      position: {lat: lat, lng: lng},
      map: $scope.map,
      title: 'Hello World!'
    });

    $scope.markers.push(marker);
  };

  //map click to add marker
  $scope.click = function(lat, lng) {
    addMarker(lat, lng);
  };

  Geocoder.getLatLng('2290A 15th Street, San Francisco, CA', console.log);

});

//angular directive tied to the my-map element in index.html.  This replaces my-map with the DOM elments generated by the template and modifoed by the link function
map.directive('myMap', function(Geocoder) {

  var link = function(scope, element, attrs) {

    //Saves map dom element into
    scope.mapElement = element[0];

    //Saves function to scope to draw a new map based on lat & lng, this function is available in the shared scope as $scope
    scope.drawMap = function(lat, lng, zoom = 12) {

      var mapOptions = {
        center: new google.maps.LatLng(lat, lng),
        zoom: zoom,
        scrollwheel: false,
        show: true
      };

      scope.map = new google.maps.Map(scope.mapElement, mapOptions);

      // Add click event listener, which call the $scope.click method
      google.maps.event.addListener(scope.map, 'click', function (event) {
        var lat = event.latLng.lat();
        var lng = event.latLng.lng();
        scope.click(lat, lng);
      }); //end addListener

    };

    Geocoder.getLatLng('944 Market St, San Francisco, CA', scope.drawMap);
  };

  return {
    template: '<div id="gmap"></div>',
    replace: true,
    //function passed into link will modify the elements that the directive adds to the dom
    link: link,
    //setting scope to false will allow scope to be shared with the controller
    scope: false
  };
});

